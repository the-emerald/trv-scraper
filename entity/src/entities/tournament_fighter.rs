//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tournament_fighter")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub tournament_id: i64,
    #[sea_orm(primary_key, auto_increment = false)]
    pub tournament_service_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub fighter_id: i64,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub account: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::fighter::Entity",
        from = "Column::FighterId",
        to = "super::fighter::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Fighter,
    #[sea_orm(
        belongs_to = "super::tournament::Entity",
        from = "Column::TournamentId",
        to = "super::tournament::Column::ServiceId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tournament,
}

impl Related<super::fighter::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Fighter.def()
    }
}

impl Related<super::tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tournament.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
